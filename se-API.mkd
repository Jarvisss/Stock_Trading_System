# API

## **PossessedStockInfo**

## **Secuirty/Capital account**

### AccountInfo

```
string getAccountID()
string getAccountPassword(string ID)
```
This function is to get the capital account information, so that users can modify the password in the client and query the basic information of the account.

### ManagerInfo

```
string getManagerID()
string getManagerPassword()
```
This function is to obtain the basic login information of the administration, so that the admin can login, and then release or modify the basic information of the stock.

### UserInfo

```
string getUserID()
string getUserPassword()
```
This function is obtain the basic login information of the user, in order the the user can login in the client.

## **CentralTransactionSystem**

### getRealTimeData

```
hashtable getRealTimeData(void)
```
This function is to provide the dynamic data of all the stocks from Central Transaction System to the Information Publishing System. It returns a hashtable that contain all the real-time data of each stock of which the key value is the ID of the stock.



## **Information Release(Example)**

This modules is to manage the dynamic information for each stock and update the data in the memory real-time from the Central Transaction System modules for every 5 seconds. Besides it can provide the chart data for the Renderer part which programed in JavaScript.

### getStockName / getStockID

```
string getStockName(string ID)
string getStockID(string name)
```
These two function is to help users to transform between strock name and ID. It receives:
- ID: the stock ID for query
- name: the stock name for query

and returns the corresponding stock name and ID.


### SaveStockValue

```
int SaveStockValue(void)
```
This function is to save the statistics of all the stocks to the log file. It returns 1 while save successfully and returns 0 as failing.

### getStatistics

```
struct statistics getStatistics(name)
struct statistics getStatistics(ID)
```
This function is to obtain the dynamic data for the stock that the user want to consult. It receives name or ID as parameter:
- ID: the stock ID for query
- name: the stock name for query

and returns the statistics structure for ```Renderer``` to show.

### updateData

```
int updateData(void)
```
This function is to update the real-time data for each stock for every 5 seconds so that the user can see the dynamic  chart in visualization. It returns 1 if update successfully and 0 when fails.

## **Renderer**

This modules is programed in JavaScript that it will be called when the html is loaded. Its main function is to render the chart in visualization so that the user can get more details information from the website.

### render

```
void render(void)
```
This function is to render the chart for the user according to the present data structure in the memory, which can be set by users. It may update dynamically.

### setmode

```
void setmode(int type)
```
This function is enable user to change the mode of the chart, including showing the Candlestick charts for day, month or year. It receives:
- type: decides which mode of chart to render.

### updateTable

```
void updateTable()
```
This function is to update the data table so that it can renew the chart. It will visit the server synchronized and obtain new present information of the stock.
